/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface AuthenticationExtensionsPrfInputs {
  eval?: AuthenticationExtensionsPRFValues | undefined
  evalByCredential?: Record<string, AuthenticationExtensionsPRFValues> | undefined
}
export interface AuthenticationExtensionsPrfValues {
  first: Buffer
  second?: Buffer | undefined
}
export interface AuthenticationExtensionsPrfOutputs {
  results?: AuthenticationExtensionsPRFValues | undefined
}
export interface AuthenticationExtensionsClientInputs {
  appid?: string | undefined
  credProps?: boolean | undefined
  hmacCreateSecret?: boolean | undefined
  minPinLength?: boolean | undefined
  prf?: AuthenticationExtensionsPRFInputs | undefined
}
export interface AuthenticationExtensionsClientOutputs {
  appid?: boolean | undefined
  credProps?: CredentialPropertiesOutput | undefined
  hmacCreateSecret?: boolean | undefined
  minPinLength?: number | undefined
  prf?: AuthenticationExtensionsPRFOutputs | undefined
}
export interface CredentialPropertiesOutput {
  rk?: boolean | undefined
}
export interface PublicKeyCredentialDescriptor {
  id: Buffer
  transports?: Array<"ble" | "hybrid" | "internal" | "nfc" | "smart-card" | "usb"> | undefined
  type: "public-key"
}
export interface PublicKeyCredentialParameters {
  alg: number
  type: "public-key"
}
export interface PublicKeyCredentialEntity {
  name: string
}
export interface PublicKeyCredentialRpEntity {
  id?: string | undefined
  name: string
}
export interface PublicKeyCredentialUserEntity {
  displayName: string
  id: Buffer
  name: string
}
export interface AuthenticatorSelectionCriteria {
  authenticatorAttachment?: "cross-platform" | "platform" | undefined
  requireResidentKey?: boolean | undefined
  residentKey?: "discouraged" | "preferred" | "required" | undefined
  userVerification?: "discouraged" | "preferred" | "required" | undefined
}
export interface PublicKeyCredentialCreationOptions {
  attestation?: "direct" | "enterprise" | "indirect" | "none" | undefined
  authenticatorSelection?: AuthenticatorSelectionCriteria | undefined
  challenge: Buffer
  excludeCredentials?: Array<PublicKeyCredentialDescriptor> | undefined
  extensions?: AuthenticationExtensionsClientInputs | undefined
  pubKeyCredParams: Array<PublicKeyCredentialParameters>
  rp: PublicKeyCredentialRpEntity
  timeout?: number | undefined
  user: PublicKeyCredentialUserEntity
}
export interface PublicKeyCredentialRequestOptions {
  allowCredentials?: Array<PublicKeyCredentialDescriptor> | undefined
  challenge: Buffer
  extensions?: AuthenticationExtensionsClientInputs | undefined
  rpId?: string | undefined
  timeout?: number | undefined
  userVerification?: "discouraged" | "preferred" | "required" | undefined
}
export interface AuthenticatorAttestationResponse {
  clientDataJson: Buffer
  attestationObject: Buffer
  transports?: Array<string> | undefined
  authenticatorData?: Buffer | undefined
  publicKey?: Buffer | undefined
  publicKeyAlgorithm: number
}
export interface AuthenticatorAssertionResponse {
  clientDataJson: Buffer
  authenticatorData: Buffer
  signature: Buffer
  userHandle?: Buffer | undefined
}
export interface PublicKeyCredential {
  id: string
  rawId: Buffer
  response: AuthenticatorResponse
  authenticatorAttachment?: "cross-platform" | "platform" | undefined
  type: "public-key"
  clientExtensionResults?: AuthenticationExtensionsClientOutputs | undefined
}
export interface AuthenticatorResponse {
  attestation?: AuthenticatorAttestationResponse | undefined
  assertion?: AuthenticatorAssertionResponse | undefined
}
/** Create a new WebAuthn credential */
export declare function create(options: PublicKeyCredentialCreationOptions): Promise<PublicKeyCredential>
/** Get/authenticate with an existing WebAuthn credential */
export declare function get(options: PublicKeyCredentialRequestOptions): Promise<PublicKeyCredential>
/** Check if WebAuthn is supported on this platform */
export declare function isSupported(): Promise<boolean>
/** Check if a specific authenticator attachment is available */
export declare function isPlatformAuthenticatorAvailable(): Promise<boolean>
/** Get available transports for this platform */
export declare function getAvailableTransports(): Promise<Array<string>>
